#Roman Sultanov
import numpy as np
from numba import njit, prange

#Center of momentum beta factor
@njit
def betaCM(Psum): #Psum=P1+P2+...
    return Psum[1:]/Psum[0]#βvec = pvecsum/Esum

@njit
def Lorentz(beta, P): #Λ(βvec)P
    beta2 = np.dot(beta, beta)
    gamma = 1 / np.sqrt(1 - beta2)
    beta_outer = np.outer(beta, beta)
    gamma_minus_one = gamma - 1
    neg_gamma = -gamma

    L = np.zeros((4, 4))
    L[0, 0] = gamma
    L[1:, 1:] = gamma_minus_one * beta_outer / beta2 + np.identity(3)
    L[0, 1:] = neg_gamma * beta
    L[1:, 0] = neg_gamma * beta

    return L @ P

@njit
def Rotation(α, β, γ, P):
    cosα, sinα = np.cos(α), np.sin(α)
    cosβ, sinβ = np.cos(β), np.sin(β)
    cosγ, sinγ = np.cos(γ), np.sin(γ)

    R = np.zeros((4, 4))
    R[0, 0] = 1
    R[1, 1] = cosα*cosβ*cosγ-sinα*sinγ
    R[1, 2] = -cosα*cosβ*sinγ-sinα*sinγ
    R[1, 3] = cosα*sinβ
    R[2, 1] = sinα*cosβ*cosγ+cosα*sinγ
    R[2, 2] = cosα*cosγ-sinα*cosβ*sinγ
    R[2, 3] = sinα*sinβ
    R[3, 1] = -sinβ*cosγ
    R[3, 2] = sinβ*sinγ
    R[3, 3] = cosβ

    return R @ P

@njit
def TwoBodyMomenta(mi, mf1, mf2):
    mi_squared = mi ** 2
    term1 = mi_squared - (mf1 + mf2) ** 2
    term2 = mi_squared - (mf1 - mf2) ** 2
    return 1 / (2 * mi) * np.sqrt(term1 * term2)

@njit
def FinalStateMomenta(m2_12, m2_23, cosθ1, φ1, χ, m0, m1, m2, m3):
    m2_12, m2_23, cosθ1, φ1, χ = m2_12, m2_23, cosθ1, φ1, χ
    θ1 = np.arccos(cosθ1)
    m2_13 = m0**2+m1**2+m2**2+m3**2 - m2_12 - m2_23

    #Magnitude of the momenta
    p1 = TwoBodyMomenta(m0, m1, np.sqrt(m2_23))
    p2 = TwoBodyMomenta(m0, m2, np.sqrt(m2_13))
    p3 = TwoBodyMomenta(m0, m3, np.sqrt(m2_12))

    cosθ2 = (p1*p1 + p2*p2 - p3*p3)/(2*p1*p2)
    cosθ3 = (p1*p1 + p3*p3 - p2*p2)/(2*p1*p3)

    #Fix 4-momenta with p3 oriented in z (quantisation axis) direction
    P1_ = np.array([np.sqrt(p1**2 + m1**2), 0, 0, p1])
    P2_ = np.array([np.sqrt(p2**2 + m2**2), p2*np.sqrt(1. - cosθ2**2), 0, -p2*cosθ2])
    P3_ = np.array([np.sqrt(p3**2 + m3**2), -p3*np.sqrt(1. - cosθ3**2), 0, -p3*cosθ3])

    #Rotate 4-momenta to correct directions (Z-Y-Z convention)
    P1 = Rotation(φ1, θ1, χ, P1_)
    P2 = Rotation(φ1, θ1, χ, P2_)
    P3 = Rotation(φ1, θ1, χ, P3_)
    return P1, P2, P3

@njit
def FinalStateAngles(P1, P2, P3): #P=[E, px, py, pz]
    I = np.identity(4)
    #φR, θR
    PR=P1+P2
    φR=np.arctan2(PR[2],PR[1])
    θR=np.arccos(PR[3]/np.linalg.norm(PR[1:]))

    BetaPR=betaCM(PR)
    #θR1, φR1
    PR1=Rotation(0, -θR, -φR, Lorentz(BetaPR, P1)) #PR1 = L(PRz)R(0,-θR,-φR)P1 = R(0,-θR,-φR,)L(PR)P1
    φR1=np.arctan2(PR1[2],PR1[1])
    θR1=np.arccos(PR1[3]/np.linalg.norm(PR1[1:]))

    #αR1, βR1, γR1,
    PR1c = Lorentz(BetaPR, P1)  #PR1p = R(φR,θR,0)PR1 = L(PR)P1
    L1=Lorentz(-betaCM(PR1c),I)
    L2=Lorentz(-BetaPR,L1)
    RWig1=Lorentz(betaCM(P1),L2)
    αR1=np.arctan2(RWig1[2][3],RWig1[1][3])
    βR1=np.arccos(RWig1[3][3])
    γR1=np.arctan2(RWig1[3][2],-RWig1[3][1])

    #φS, θS
    PS = P1+P3
    φS = np.arctan2(PS[2],PS[1])
    θS = np.arccos(PS[3]/np.linalg.norm(PS[1:]))

    BetaPS = betaCM(PS)
    #θS1, φS1
    PS1 = Rotation(0, -θS, -φS, Lorentz(BetaPS, P1)) #PS1 = L(PSz)R(0,-θS,-φS)P1 = R(0,-θS,-φS,)L(PS)P1
    φS1 = np.arctan2(PS1[2],PS1[1])
    θS1 = np.arccos(PS1[3]/np.linalg.norm(PS1[1:]))

    #αS1, βS1, γS1
    PS1c = Lorentz(BetaPS, P1)  #PS1p = R(φS,θS,0)PS1 = L(PS)P1
    L1 = Lorentz(-betaCM(PS1c), I)
    L2 = Lorentz(-BetaPS, L1)
    SWig1 = Lorentz(betaCM(P1), L2)
    αS1 = np.arctan2(SWig1[2][3], SWig1[1][3])
    βS1 = np.arccos(SWig1[3][3])
    γS1 = np.arctan2(SWig1[3][2], -SWig1[3][1])

    #φ1, θ1
    φ1 = np.arctan2(P1[2],P1[1])
    θ1 = np.arccos(P1[3]/np.linalg.norm(P1[1:]))

    #θbU2, φbU2
    PbU2 = Rotation(0, -θ1, -φ1, Lorentz(betaCM(P2+P3), P2)) #PU2 = L(-PUz)R(0,-θ1,-φ1)P2 = R(0,-θU,-φU,)L(PU)P2
    φbU2 = np.arctan2(PbU2[2],PbU2[1])
    θbU2 = np.arccos(PbU2[3]/np.linalg.norm(PbU2[1:]))

    return φR, θR, φR1, θR1, αR1, βR1, γR1, φS, θS, φS1, θS1, αS1, βS1, γS1, φ1, θ1, φbU2, θbU2

#Data (GeV)
mΛ=2.2865  #lambda_c^+
mp=0.9383  #proton mass
mK=0.4937  #kaon- mass
mπ=0.1396  #pion+ mass
mR=1.519   #Lambda(1520) peak mass
ΓR=0.016   #Lambda(1520) width
mS=1.232   #Delta++(1232) peak mass
ΓS=0.117   #Delta++(1232) width
mU=0.896   #K*(892) peak mass
ΓU=0.047   #K*(892) width
dr = 1.5
di = 5
